{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ULZ3pEqpPILc"
      },
      "source": [
        "# Structural Optimization of a wingbox\n",
        "\n",
        "In the previous notebook we have seen the structural analysis of a single wingbox cell. We would like however to use these tools to optimize the various parameters of the wingbox in order to minimize the weight of the structure. In order to do so let's remind ourselves what exactly we can change in order to improve the performance of this wingbox.\n",
        "\n",
        "In the previous notebook we had defined the following parameters in order to perform the analysis.\n",
        "\n",
        "- $n_{cell}$    - Number of cells\n",
        "- $\\text{loc}_{sp}$    - The location of the spars\n",
        "- $t_{sk}$      - The thickness of the skin in each cell\n",
        "- $A_{str}$     - The area of the stringers\n",
        "- $t_{sp}$      -  The thickness of the spars\n",
        "- $n_{str}$     - The amount of stringers per cell\n",
        "\n",
        "\n",
        "These variables were then loaded in the API data structure as shown below:\n",
        "\n",
        "```C\n",
        "attr_dict = {\n",
        "    \"n_cell\":4,\n",
        "    \"spar_loc_nondim\":[0.3, 0.5, 0.7],\n",
        "    \"t_sk_cell\":[0.002,0.004,0.004, 0.004],\n",
        "    \"area_str\":20e-6,\n",
        "    \"t_sp\":0.008,\n",
        "    \"str_cell\":[8,8,7,8]\n",
        "}\n",
        "\n",
        "wingbox_struct = tud.Wingbox(**attr_dict)\n",
        "```\n",
        "\n",
        "However, there will be one major change. For the structural analysis of a wingbox only the stringer area is relevant however for the constraints the geometry of said stringers is also important as you will see further up in this notebook.\n",
        "\n",
        "So in the optimization of the wingbox we wil add the stringer height, width and thickness to the optimization parameters.\n",
        "\n",
        "The parameters which we will optimize for are the skin thickness in each cell, the area of the stringers, the thickness of the spars and finally the stringer of the cell. This leaves the amount of cells, the spar locations and the bay length to be decided by the designers. The reasoning behind this is that usually your rib and spar locations are constrained the  placement of other systems in the wing such as the flap and slat mechanism. Below a summary can be found of the fixed and optimization parameters:\n",
        "\n",
        "\n",
        "| **Optimiziation Parameters**         \t| **Fixed Parameters** \t|\n",
        "|--------------------------------------\t|----------------------\t|\n",
        "| Skin thickness in each cell          \t| The amount of cells  \t|\n",
        "| Stringer width                       \t| Spar locations       \t|\n",
        "| Stringer height                       \t|   Bay length|\n",
        "| Stringer thickness                       \t|   \t|\n",
        "| Spar thickness                       \t|         \t|\n",
        "| The amount of stringers in each cell \t|                      \t|\n",
        "\n",
        "\n",
        "\n",
        "# Laying out a framework for a full wing optimization\n",
        "\n",
        "In order define our constraints later on we will have to divide the wing in sections called bays. Each bay is enclosed by two ribs, thus the length of these bays is for the designer to decide. Once, a bay is defined, we can further split this up in a collection of flat sheets. Where each sheet is in turn enclosed by stringers. The boundary conditions for these stringers have been decided to be simply supported. In [figure 1](#figure1) we can see the result of the partitioning that was just described. Although we will not model the effects of taper (Future implementation).\n",
        "\n",
        "<br>\n",
        "<p align=\"left\"  id=\"figure1\" >\n",
        "<img src=\"https://github.com/saullocastro/tuduam/blob/main/doc/_static/wing_bay_sheet.png?raw=true\" width=\"600\" />\n",
        " <br>\n",
        "</p>\n",
        "<p align=\"left\">\n",
        "<em>Figure 1: Wing modeled as a combination of simply supported sheets and simply supported bays. Figure taken from T.H.G Megson, Aircraft  Structures For Engineering Students</em>\n",
        "</p>\n",
        "<br>\n",
        "\n",
        "Now that our wing has been divided into bays, and the bays respectively into sheets we can limit the scope of the optimization. Instead, of optimizing for the entire wing simultaneously we will optimize each bay. In [figure 2](#figure2) an overview is found on how the optimization in this notebook will tackle the sizing of the structural members in the wing.\n",
        "\n",
        "<br>\n",
        "<p align=\"left\"  id=\"figure2\" >\n",
        "<img src=\"https://raw.githubusercontent.com/saullocastro/tuduam/6e2a96b1fd444969175b2b61de6eb1fc9b94a9d5/doc/_static/Optimization_procedure.svg\" width=\"600\" style=\"background-color: white;\"/>\n",
        " <br>\n",
        "</p>\n",
        "<p align=\"left\">\n",
        "<em>Figure 2: An overview of the optimization procedure for an entire wing.  </em>\n",
        "</p>\n",
        "<br>\n",
        "\n",
        "The following sections will now enclose how to optimize a single one of these bays, starting with constraining the design space.\n",
        "\n",
        "# Constraining the design\n",
        "\n",
        "During the optimization it is important we set the minimum constraints the design should meet. Otherwise, the optimum solution would be no wingbox at all. For the API documentation of all these constraints please visit [constraints documentation](https://saullocastro.github.io/tuduam/constraints.html). We'll cover the most important ones in this document and link to the documentation for the remainder of the constraints.\n",
        "\n",
        "### Buckling\n",
        "\n",
        "As previously discussed, a section of the wingbox is divided up in plates. Knowing these plates are simply supported we can compute the critical instability in both shear and compression using  equations 1 and 2, respectively:\n",
        "\n",
        "$$\n",
        "\\tag{1}\n",
        "\\sigma_{cr} = k_b  \\frac{pi^2 E}{12(1 - \\nu)} \\left(\\frac{t_{sk}}{b}\\right)^2\n",
        "$$\n",
        "\n",
        "$$\n",
        "\\tag{2}\n",
        "\\sigma_{cr} = k_c  \\frac{pi^2 E}{12(1 - \\nu)} \\left(\\frac{t_{sk}}{b}\\right)^2\n",
        "$$\n",
        "\n",
        "For the specifics on $k_b$ and $k_c$, please review the [API documentation](https://saullocastro.github.io/tuduam/).\n",
        "\n",
        "Whilst, we could simply apply them individually these two critical loads are not independent from each other. In increased shear loading, decreases the compression capability of the sheet. Hence, we use an interaction curve as described in equation 3.\n",
        "\n",
        "$$\n",
        "\\tag{3}\n",
        "\\frac{N_x}{N_{x,crit}} + \\left(\\frac{N_{xy}}{N_{xy,crit}}\\right)^2 < 1\n",
        "$$\n",
        "\n",
        "In equation 3, $N_{x,crit}$ is computed with equation 2 and $N_{xy,crit}$ with equation 1. $N_x$ and $N_{xy}$ are the loads specified by the user.\n",
        "\n",
        "Finally, we also constrain the design using global skin buckling as a stiffened panel can also buckle as a whole.\n",
        "In this case, the width of the panel is utilized instead of the stringer pitch, and simply supported conditions\n",
        "can be assumed. The contribution of the stringers that still provide a stiffening effect can be considered by\n",
        "smearing their thickness to the skin thickness, as in Equation 47.\n",
        "\n",
        "$$\n",
        "\\tag{47}\n",
        "t_{smeared} = \\frac{t_{sk} \\cdot b + N_{str} \\cdot A_{st}}{b}\n",
        "$$\n",
        "\n",
        "The smeared thickness is substituted in the equation for critical sheet compression.\n",
        "The constraint is expressed below.\n",
        "\n",
        "$$\n",
        "\\sigma_{cr,glob} - \\sigma_{cr,loc} \\geq 0\n",
        "$$\n",
        "\n",
        "\n",
        "### Von Mises failure Criterion\n",
        "\n",
        "\n",
        "Besides buckling we also do not want the wingbox to yield. Hence we also apply the von Mises yield criterion. Considering the direct stresses and plane stresses that occur in the wingbox we can derive equation 4.\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "$$\n",
        "\\begin{align*}\n",
        "\\sigma_y & \\geq  \\sigma_v \\\\\n",
        "\\tag{4}\n",
        "\\sigma_y    & \\geq  \\sqrt{\\sigma_{11}^2 + 3\\tau^2} \\\\\n",
        "\\end{align*}\n",
        "$$\n",
        "\n",
        "Abiding by this constraint ensures that the wingbox does not yield under the expected loads.\n",
        "\n",
        "### Other constraints\n",
        "\n",
        "- [Column Stringer buckling](https://saullocastro.github.io/tuduam/constraints.html#tuduam.structures.constraints.IsotropicWingboxConstraints.column_str_buckling)\n",
        "- [Crippling](https://saullocastro.github.io/tuduam/constraints.html#tuduam.structures.constraints.IsotropicWingboxConstraints.crippling)\n",
        "- [Stringer Flange Buckling](https://saullocastro.github.io/tuduam/constraints.html#tuduam.structures.constraints.IsotropicWingboxConstraints.stringer_flange_buckling) (similar to buckling of sheet, except different BC's)\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qwmXwWVVYsdn"
      },
      "source": [
        "# Leveraging Python for the optimization\n",
        "\n",
        "In order to leverage Python for our optimization, we will first have to install two libraries into the `google collab` environment. These are `tuduam` and `pymoo`, tuduam is a library specifically tailored for this course and pymoo a library for multi-objective optimization. Please run the code cell below in order to do."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "h5kszYMmPILe",
        "outputId": "e7c41aa1-86fb-45bf-a795-40a0e4d21a79"
      },
      "outputs": [],
      "source": [
        "!pip install tuduam\n",
        "!pip install pymoo\n",
        "!git clone https://github.com/saullocastro/tuduam.git\n",
        "# If the following error occurs \"fatal: destination path 'tuduam' already exists and is not an empty directory.\" please continue as your environment is already set up correctly"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6G0qdsbrWF1H"
      },
      "source": [
        "# Initialisation of parameters\n",
        "\n",
        "To start the initialisation of the optimisation that we are going to perform  there are a two parameters that require a definition as these are designer choices."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "MlqExrbPPILf"
      },
      "outputs": [],
      "source": [
        "import os\n",
        "import tuduam\n",
        "from tuduam.data_structures import Wingbox, Material\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "attr_dict = {\n",
        "    \"n_cell\":4,\n",
        "    \"spar_loc_nondim\":[0.3, 0.5, 0.75],\n",
        "    \"str_cell\": [9,7,9,8]\n",
        "}\n",
        "\n",
        "mat_dict = {\n",
        "        \"young_modulus\":3e9,\n",
        "        \"shear_modulus\":80e9,\n",
        "        \"safety_factor\":1.5,\n",
        "        \"load_factor\":1.0,\n",
        "        \"poisson\":0.3,\n",
        "        \"density\":1600,\n",
        "        \"beta_crippling\":1.42,\n",
        "        \"sigma_ultimate\":407000000.0,\n",
        "        \"sigma_yield\":407000000.0,\n",
        "        \"g_crippling\":5\n",
        "    }\n",
        "\n",
        "mat_struct = Material(**mat_dict)\n",
        "wingbox_struct = Wingbox(**attr_dict)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "y456Vm7U6eGH"
      },
      "source": [
        "Having this definitnon we can now start the optimization. Before continuing it is probably useful to first take a look through the API documentation for the class and its methods that we will be using. The class that we will be using is `SectionOpt` which is situated in the `structures`subpackage in tuduam. The link to the [API docs](https://saullocastro.github.io/tuduam/optimization.html#tuduam.structures.optimization.SectionOpt) can be found here.\n",
        "\n",
        "Before iterating for an entire wing, let us first do an example for a single section. We'll take a section of the wing where the mean chord, $\\bar{c} = 2$ and the length of this section $b = 1.2$. For the airfoil, we'll use th NACA 4412. For the amount of cells and spar locations we'll use the previously defined values."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "YY6uewag_YOQ"
      },
      "outputs": [],
      "source": [
        "from tuduam.structures import SectionOpt\n",
        "\n",
        "chord = 3 # Chord length\n",
        "coord_path = os.path.realpath(os.path.join(os.path.abspath('.'), 'tuduam', 'examples', 'naca_4412.txt')) # Path to airfoil coordinates\n",
        "len_sec = .2 # Lenght of the section\n",
        "\n",
        "opt_obj = SectionOpt(coord_path, chord, len_sec, wingbox_struct, mat_struct)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EC4p94hYBHAV"
      },
      "source": [
        "Remember figure 2 which portrayed the top view of the optimization loop. Let us start at the core, i.e the optimization that is run for a fixed amount of stringers. For us these stringers were defined `wingbox_struct`. This optimization in the library is defined in the method `GA_optimize`, here you can find the [specifics](https://saullocastro.github.io/tuduam/optimization.html#tuduam.structures.optimization.SectionOpt.GA_optimize).\n",
        "\n",
        "Let's run the optimization below with some typical values for the loads! Also note that we specify the upper and lower boundsFeel free to alter them and watch the design change.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mgGmfnVjDT-u",
        "outputId": "8ac7473e-0c51-44bf-bb54-d198cc512bd7"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "\n",
        "shear_y = 30e3\n",
        "shear_x = 15000\n",
        "moment_y = 4e2\n",
        "moment_x = 30e3\n",
        "applied_loc = 0.45\n",
        "opt = SectionOpt(coord_path, chord, len_sec, wingbox_struct, mat_struct)\n",
        "\n",
        "upper_bnds = 8*[0.012]\n",
        "lower_bnds = 4*[0.0001] +  [0.003] + [0.001] + 2*[0.003]\n",
        "res =  opt.GA_optimize(shear_y, shear_x, moment_y, moment_x, applied_loc, upper_bnds, lower_bnds, pop=20, n_gen= 60,multiprocess=True, verbose= True)\n",
        "\n",
        "print(f\"\\n\\n======== Results ==========\")\n",
        "print(f\"Skin thickness = {np.array(res.X[:4])*1000} mm\" )\n",
        "print(f\"Spar thickness = {res.X[4]*1000} mm\")\n",
        "print(f\"Stringer thickness = {res.X[5]*1000} mm\")\n",
        "print(f\"Stringer  width= {res.X[6]*1000} mm\")\n",
        "print(f\"Stringer height = {res.X[7]*1000} mm\")\n",
        "\n",
        "# res =  opt_obj.full_section_opt(, pop=100, pop_full= 10, n_gen= 5 ,n_gen_full= 2)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8sbxM-gXR_V5"
      },
      "source": [
        "We can also get to know more about the history of each iteration through the `res` variable which is an instance of the `pymoo.core.result.Result`class. In this class the objective functions is described with `F` and the design vector with `X`. The object contains the history of each generation which we can access like shown below where we access the first generation."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ylZctBy5PnEw",
        "outputId": "4aa9cd54-4932-43a6-f11f-a8b3bda712db"
      },
      "outputs": [],
      "source": [
        "pop_lst = [gen.pop for gen in res.history]\n",
        "print(\"Generation 1\\nt_sk_cell1 - t_sk_cell2 - t_sk_cell3 - t_sk_cell4 - t_sp -  t_st - w_st - h_st\")\n",
        "print(f\"=====================================================================\\n\\n {pop_lst[0].get('X')}\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qlp9dJ4eSrD8"
      },
      "source": [
        "We can also plot the average value of variables over time and optimization function over time, this gives us an idea of how the variables effect the design. Run the code below:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 911
        },
        "id": "iVtpZJ09TEaA",
        "outputId": "2fa73095-2be1-4c36-d385-6a2a6a18b9b1"
      },
      "outputs": [],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "t_sk_cell1_lst = [np.average(pop.get(\"X\")[:][0]) for pop in pop_lst]\n",
        "t_sk_cell2_lst = [np.average(pop.get(\"X\")[:][1]) for pop in pop_lst]\n",
        "t_sk_cell3_lst = [np.average(pop.get(\"X\")[:][2]) for pop in pop_lst]\n",
        "t_sk_cell4_lst = [np.average(pop.get(\"X\")[:][3]) for pop in pop_lst]\n",
        "t_sp_lst = [np.average(pop.get(\"X\")[:][4]) for pop in pop_lst]\n",
        "t_st_lst = [np.average(pop.get(\"X\")[:][5]) for pop in pop_lst]\n",
        "w_st_lst = [np.average(pop.get(\"X\")[:][6]) for pop in pop_lst]\n",
        "h_st__lst = [np.average(pop.get(\"X\")[:][7]) for pop in pop_lst]\n",
        "\n",
        "f_lst = [np.average(pop.get(\"F\")) for pop in pop_lst]\n",
        "\n",
        "fig, (ax1, ax2) = plt.subplots(1, 2)\n",
        "fig.set_size_inches(18.5, 10.5)\n",
        "\n",
        "ax1.plot(t_sk_cell1_lst, label=\"T sk cell 1\")\n",
        "ax1.plot(t_sk_cell2_lst, label=\"T sk cell 2\")\n",
        "ax1.plot(t_sk_cell3_lst, label=\"T sk cell 3\")\n",
        "ax1.plot(t_sk_cell4_lst, label=\"T sk cell 4\")\n",
        "ax1.plot(t_sp_lst, label=\"T sp\")\n",
        "ax1.plot(t_st_lst, label=\"T st\")\n",
        "ax1.plot(w_st_lst, label=\"W st\")\n",
        "ax1.plot(h_st__lst, label=\"H st\")\n",
        "\n",
        "ax2.plot(f_lst, label=\"Weight\")\n",
        "\n",
        "ax1.set_title(\"Average value of variables over time\")\n",
        "ax2.set_title(\"Average value of the optimization function over time\")\n",
        "\n",
        "\n",
        "ax1.set_xlabel(\"Generation\")\n",
        "ax2.set_xlabel(\"Generation\")\n",
        "ax1.set_ylabel(\"Thickness (mm)\")\n",
        "ax1.legend()\n",
        "ax2.legend()\n",
        "ax1.grid()\n",
        "ax2.grid()\n",
        "\n",
        "plt.show()\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ySTG9-58b8TQ"
      },
      "source": [
        "As you can see, it gets quite messy with all variables in there. One could also argue the information gets lost when taking the average and only plotting the optimum solution would give a better idea. It is left up to the reader to implement this."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "f-LEFH8LdkT8"
      },
      "source": [
        "# Changing the amount of stringers\n",
        "\n",
        "In the previous optimization we only optimzied for the various thicknesses, however a better solution would be possible when different configuration of stringers are used, or even a different layout of ribs.\n",
        "\n",
        "`tuduam` also provides a method for optimizing for different stringer configuration. This is the outer optimization loop as has been shown earlier in this notebook in figure 2. The API documentation for this functionality can be found [here](https://saullocastro.github.io/tuduam/optimization.html#tuduam.structures.optimization.SectionOpt.full_section_opt). `SectionOpt.full_section_opt` interally also used the optimization which we experimented with previously. However, it calls this function for every stringer configuration, hence it is signficantly more computationally expensive.\n",
        "\n",
        "The method does come with a `multiprocess` flag which does allow it to see major performance boosts on more powerful platforms. So feel free to give it a try on your local machine. The setup is very similar to `GA_optimize`.\n",
        "\n",
        "This repository does **not** implememt an optimization of the spanwise rib distribution.\n"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.7"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
